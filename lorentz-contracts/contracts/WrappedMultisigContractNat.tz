parameter (or unit %default
              (pair %main
                (pair
                  (nat %counter) # counter, used to prevent replay attacks
                  (or :action    # payload to sign, represents the requested action
                    (nat %base_contract_input) # the parameter type of the base contract
                    (pair %change_keys # change the keys controlling the multisig
                      (nat %threshold)
                      (list %keys key)
                    )
                  )
                )
                (list %sigs (option signature)))); # signatures

storage (pair
          (big_map %base_contract_big_map bool unit) # the big map of the base contract
          (pair
            (pair
              (lambda %base_contract # the base contract source code
                (pair
                  nat
                  (pair
                    (big_map bool unit)
                    nat
                  )
                )
                (pair
                  (list operation)
                  (pair
                    (big_map bool unit)
                    nat
                  )
                )
              )
              (nat %base_contract_storage) # the storage for the base contract
            )
            (pair
              (nat %stored_counter)
              (pair
                (nat %threshold)
                (list %keys key) # the signers' keys
              )
            )
          )
        );

code { DUP;
       CAR;
       DIP { CDR };
       IF_LEFT { # Default entry point: do nothing
                 # this entry point can be used to send tokens to the contract
                 DROP; 
                 NIL operation;
                 PAIR }
               { # Main entry point
                 # Assert no token was sent:
                 # to send tokens, the default entry point should be used
                 DIP { DUP;
                       CAR;
                       DIP { CDR };
                       DIP { DUP;
                             CAR;
                             DIP { CDR } };
                       PAIR };
                 SWAP;
                 DIP { PUSH mutez 0;
                       AMOUNT;
                       COMPARE;
                       EQ;
                       IF {  }
                          { PUSH string "Some tokens were sent to this contract outside of the default entry point.";
                            FAILWITH };
                       SWAP;
                       DUP;
                       DIP { SWAP };
                       DIP { DUP;
                             CAR;
                             DIP { CDR };
                             # pair the payload with the current contract address, to ensure signatures
                             # can't be replayed accross different contracts if a key is reused.
                             DUP;
                             SELF;
                             ADDRESS;
                             PAIR;
                             PACK; # form the binary payload that we expect to be signed
                             DIP { DUP;
                                   CAR;
                                   DIP { CDR };
                                   DIP { SWAP } };
                             SWAP };
                       DUP;
                       CAR;
                       DIP { CDR };
                       # Check that the counters match
                       DIP { SWAP };
                       COMPARE;
                       EQ;
                       IF {  }
                          { PUSH string "Counters do not match.";
                            FAILWITH };
                       # Compute the number of valid signatures
                       DIP { SWAP };
                       DUP;
                       CAR;
                       DIP { CDR };
                       DIP { # Running count of valid signatures
                             PUSH nat 0;
                             SWAP;
                             ITER { DIP { SWAP };
                                    SWAP;
                                    IF_CONS { IF_NONE { SWAP;
                                                        DROP }
                                                      { SWAP;
                                                        DIP { SWAP;
                                                              DIP { DIP { DIP { DUP };
                                                                          SWAP } };
                                                              # Checks signatures, fails if invalid
                                                              DIP { DIP { DUP };
                                                                    SWAP };
                                                              SWAP;
                                                              DIP { CHECK_SIGNATURE };
                                                              SWAP;
                                                              IF { DROP }
                                                                 { PUSH (pair string unit) (Pair "InvalidSignature" Unit);
                                                                   FAILWITH };
                                                              PUSH nat 1;
                                                              ADD } } }
                                            # There were fewer signatures in the list
                                            # than keys. Not all signatures must be present, but
                                            # they should be marked as absent using the option type.
                                            { PUSH (pair string unit) (Pair "FewerSignaturesThanKeys" Unit);
                                              FAILWITH };
                                    SWAP } };

                       # Assert that the threshold is less than or equal to the
                       # number of valid signatures.
                       COMPARE;
                       LE;
                       IF {  }
                          { PUSH string "Quorum not present";
                            FAILWITH };
                       # Assert no unchecked signature remains
                       IF_CONS { PUSH (pair string unit) (Pair "UncheckedSignaturesRemain" Unit);
                                 FAILWITH }
                               {  };
                       DROP;
                       # Increment counter and place in storage
                       DIP { DUP;
                             CAR;
                             DIP { CDR };
                             PUSH nat 1;
                             ADD;
                             PAIR } };
                 SWAP;
                 DIP { SWAP };
                 # We have now handled the signature verification part,
                 # produce the operation requested by the signers.
                 IF_LEFT { # Execute internal lambda (base contract) on the given parameter
                           DIP { SWAP;
                                 DUP;
                                 CAR;
                                 DIP { CDR };
                                 DIP { DUP;
                                       CAR;
                                       DIP { CDR };
                                       SWAP;
                                       DIP { DUP } };
                                 PAIR };
                           PAIR;
                           EXEC;
                           DUP;
                           CAR;
                           DIP { CDR };
                           DIP { DUP;
                                 CAR;
                                 DIP { CDR };
                                 DIP { SWAP;
                                       PAIR };
                                 PAIR } }
                         { # Change set of signatures
                           DIP { CAR };
                           SWAP;
                           PAIR;
                           SWAP;
                           NIL operation };
                 DIP { DUP;
                       CAR;
                       DIP { CDR };
                       DIP { PAIR };
                       PAIR };
                 PAIR } };
