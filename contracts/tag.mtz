let {
  type Union = (int | nat | list string | option string | unit);
  getType :: '[Union, ...] -> '[string, ...]
  = { case
        { drop; push string "int" }
        { drop; push string "nat" }
        { concat }
        { if_some {} { push string "nothing" } }
        { drop; push string "unit" }
    };
};
parameter unit;
storage string;
code { drop;
       push int 1;                    tag 0 Union; getType;
       push nat 4;                    tag 1 Union; getType;
       push (list string) {"a"; "b"}; tag 2 Union; getType;
       push string "o"; some;         tag 3 Union; getType;
       unit;                          tag 4 Union; getType;
       concat; concat; concat; concat;
       nil operation; pair
     }
